import 'dart:async';
import 'dart:convert';

import 'package:get/get.dart';
import 'package:logging/logging.dart';
import 'package:signalr_netcore/signalr_client.dart';
import '../models/pair.dart';

/// SignalR baÄŸlantÄ± servis sÄ±nÄ±fÄ±
class SignalRService extends GetxService {
  static SignalRService get to => Get.find();

  // Hub URL ve API Key
  String _baseUrl = '';
  String _apiKey = '';

  // BaÄŸlantÄ± durumunu izleyebilmek iÃ§in RxBool
  final isConnected = false.obs;
  final isConnecting = false.obs;
  final connectionError = Rxn<String>();

  // Son alÄ±nan fiyat verisi
  final lastReceivedData = Rxn<dynamic>();

  // SignalR hub baÄŸlantÄ±sÄ±
  HubConnection? _hubConnection;

  // Fiyat gÃ¼ncellemeleri iÃ§in stream controller
  final StreamController<dynamic> _messageController =
      StreamController<dynamic>.broadcast();

  // Sistem mesajlarÄ± iÃ§in stream controller
  final StreamController<String> _systemMessageController =
      StreamController<String>.broadcast();

  // BaÄŸlantÄ± durumu deÄŸiÅŸiklikleri iÃ§in stream controller
  final StreamController<bool> _connectionStateController =
      StreamController<bool>.broadcast();

  // YayÄ±n akÄ±ÅŸlarÄ±
  Stream<dynamic> get messageStream => _messageController.stream;
  Stream<String> get systemMessageStream => _systemMessageController.stream;
  Stream<bool> get connectionStateStream => _connectionStateController.stream;

  /// SignalR baÄŸlantÄ±sÄ±nÄ± baÅŸlatÄ±r
  Future<void> initConnection(String baseUrl, String apiKey) async {
    if (isConnecting.value) return;

    _baseUrl = baseUrl;
    _apiKey = apiKey;

    isConnecting.value = true;
    connectionError.value = null;

    try {
      await _disposeCurrentConnection();

      final hubUrl = '$baseUrl/parityhub?apiKey=$apiKey';
      print('SignalR Hub URL: $hubUrl');

      final httpConnectionOptions = HttpConnectionOptions(
        logger: Logger('SignalR'),
        logMessageContent: true,
        skipNegotiation: true,
        transport: HttpTransportType.WebSockets,
      );

      _hubConnection = HubConnectionBuilder()
          .withUrl(hubUrl, options: httpConnectionOptions)
          .withAutomaticReconnect(retryDelays: [0, 2000, 5000, 10000, 30000])
          .configureLogging(Logger('SignalR-Client'))
          .build();

      _hubConnection!.onreconnecting(({error}) {
        print('SignalR baÄŸlantÄ±sÄ± yeniden kuruluyor... Hata: $error');
        isConnected.value = false;
        _connectionStateController.add(false);
        _systemMessageController.add('BaÄŸlantÄ± yeniden kuruluyor...');
      });

      _hubConnection!.onreconnected(({connectionId}) {
        print('SignalR baÄŸlantÄ±sÄ± yeniden kuruldu: $connectionId');
        isConnected.value = true;
        _connectionStateController.add(true);
        _systemMessageController.add('BaÄŸlantÄ± yeniden kuruldu');
      });

      _hubConnection!.onclose(({error}) {
        print('SignalR baÄŸlantÄ±sÄ± kapandÄ±. Hata: $error');
        isConnected.value = false;
        _connectionStateController.add(false);
        if (error != null) {
          connectionError.value = error.toString();
          _systemMessageController.add('BaÄŸlantÄ± hatasÄ±: $error');
        }
      });

      _registerHubHandlers();

      await _hubConnection!.start();
      print('SignalR baÄŸlantÄ±sÄ± baÅŸlatÄ±ldÄ±.');
      isConnected.value = true;
      _connectionStateController.add(true);
      _systemMessageController.add('BaÄŸlantÄ± baÅŸarÄ±yla kuruldu');
    } catch (e) {
      print('SignalR baÄŸlantÄ± hatasÄ±: $e');
      connectionError.value = e.toString();
      isConnected.value = false;
      _connectionStateController.add(false);
      _systemMessageController.add('BaÄŸlantÄ± hatasÄ±: $e');
    } finally {
      isConnecting.value = false;
    }
  }

  /// BaÄŸlantÄ±yÄ± yeniden baÅŸlatÄ±r
  Future<void> reconnect() async {
    if (_baseUrl.isNotEmpty && _apiKey.isNotEmpty) {
      await initConnection(_baseUrl, _apiKey);
    } else {
      print('BaÄŸlantÄ± yenilenemedi: baseUrl veya apiKey eksik');
      _systemMessageController.add('BaÄŸlantÄ± yenilenemedi: Ayarlar eksik');
    }
  }

  void _registerHubHandlers() {
    if (_hubConnection == null) return;

    // ReceiveParities metodunu dinle - Toplu parite verisi iÃ§in
    _hubConnection!.on('ReceiveParities', (arguments) {
      if (arguments != null && arguments.isNotEmpty) {
        final data = arguments.first;
        print('=================== PARÄ°TE VERÄ°LERÄ° ===================');
        print('Zaman: ${DateTime.now()}');
        print('Veri Tipi: ${data.runtimeType}');
        print('Veri Ä°Ã§eriÄŸi:');
        print(data);
        print('====================================================');

        lastReceivedData.value = data;
        _messageController.add(data);
      }
    });

    // ReceiveMessage metodunu dinle - Tekil parite gÃ¼ncellemeleri iÃ§in
    _hubConnection!.on('ReceiveMessage', (arguments) {
      if (arguments != null && arguments.isNotEmpty) {
        final data = arguments.first;
        print('------------------ PARÄ°TE GÃœNCELLEMESÄ° ------------------');
        print('Zaman: ${DateTime.now()}');
        print('Veri Tipi: ${data.runtimeType}');
        print('Veri Ä°Ã§eriÄŸi:');
        print(data);
        print('------------------------------------------------------');

        lastReceivedData.value = data;
        _messageController.add(data);
      }
    });

    // Sistem mesajlarÄ±nÄ± dinle
    _hubConnection!.on('SystemMessage', (arguments) {
      if (arguments != null && arguments.isNotEmpty) {
        final message = arguments.first.toString();
        print('ğŸ”” Sistem MesajÄ±: $message');
        _systemMessageController.add(message);
      }
    });
  }

  /// BaÄŸlantÄ±yÄ± kapatÄ±r
  Future<void> closeConnection() async {
    print('SignalR baÄŸlantÄ±sÄ± kapatÄ±lÄ±yor...');
    await _disposeCurrentConnection();
    _systemMessageController.add('BaÄŸlantÄ± kapatÄ±ldÄ±');
  }

  /// Servisi kapat
  @override
  void onClose() {
    _disposeCurrentConnection();

    _messageController.close();
    _systemMessageController.close();
    _connectionStateController.close();

    super.onClose();
  }

  /// Mevcut baÄŸlantÄ±yÄ± temizle
  Future<void> _disposeCurrentConnection() async {
    if (_hubConnection != null) {
      try {
        await _hubConnection!.stop();
      } catch (e) {
        print('SignalR baÄŸlantÄ±sÄ±nÄ± kapatÄ±rken hata: $e');
      }
      _hubConnection = null;
    }
    isConnected.value = false;
  }
}
